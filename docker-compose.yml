services:
  metasploit:
    image: metasploitframework/metasploit-framework:latest
    container_name: metasploit
    stdin_open: true
    tty: true
    command: tail -f /dev/null  # Só segura o container rodando
    ports:
      - "4444:4444"
    networks:
      - app-network
    volumes:
      - msf-db:/var/lib/postgresql/data  # Persistência do banco de dados do Metasploit

  postgres:
    image: postgres
    container_name: postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}  # Vai pegar do arquivo .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}  # Vai pegar do arquivo .env
      POSTGRES_DB: ${POSTGRES_DB}  # Nome do banco de dados que será criado
    ports:
      - "${POSTGRES_PORT}:5432" #porta do host mapeada para a porta interna do container(evita conflitos)
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Persistência de dados do PostgreSQL
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"  # Interface de gestão do RabbitMQ
    networks:
      - app-network

  nmap:
    image: instrumentisto/nmap:latest
    container_name: nmap
    stdin_open: true
    tty: true
    entrypoint: ["tail", "-f", "/dev/null"]  # Isso mantém o container rodando esperando comandos.
    networks:
      - app-network

  sqlmap:
    image: parrotsec/sqlmap:latest
    container_name: sqlmap
    stdin_open: true
    tty: true
    entrypoint: ["tail", "-f", "/dev/null"]  # Isso mantém o container rodando esperando comandos.
    networks:
      - app-network

  dalfox:
    image: hahwul/dalfox:latest
    container_name: dalfox
    stdin_open: true
    tty: true
    entrypoint: ["tail", "-f", "/dev/null"]  # Isso mantém o container rodando esperando comandos.
    networks:
      - app-network

  # mitmproxy (comentado por enquanto, remova o comentário se quiser usar)
  # mitmproxy:
  #   image: mitmproxy/mitmproxy:latest
  #   container_name: mitmproxy
  #   stdin_open: true
  #   tty: true
  #   command: mitmproxy
  #   ports:
  #     - "8080:8080"  # Porta HTTP proxy
  #     - "8081:8081"  # Porta Web interface (se você quiser usar a interface web)
  #   volumes:
  #     - ~/.mitmproxy:/home/mitmproxy/.mitmproxy  # Volumes para persistir certificados e configurações
  #   networks:
  #     - app-network
  #   restart: unless-stopped  # Opcional: Manter o container reiniciando em caso de falha

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:  # Persistência do banco de dados do PostgreSQL
  msf-db:        # Persistência do banco de dados do Metasploit
